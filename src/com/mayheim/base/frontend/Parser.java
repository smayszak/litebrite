package com.mayheim.base.frontend;
import  com.mayheim.base.intermediate.*;
import com.mayheim.base.message.*;

public abstract class Parser implements MessageProducer {
    protected static SymbolTable symbolTable; // generated symbol table
    protected static MessageHandler messageHandler; //message handler delegate

    static {
        symbolTable = null;
        messageHandler = new MessageHandler();
    }

    protected Scanner scanner; //scanner used with this parser
    protected ICode iCode; // intermeidiate code generated by this parser

    protected Parser(Scanner scanner) {
        this.scanner = scanner;
        this.iCode = null;
    }

    /**
     * parse a source program and genearte the intermediate code and the
     * symbol table. to be implemented by a language specific paser cubclass
     *
     * @throws Exception if an error occured
     */

    public abstract void parse()
            throws Exception;

    /**
     * return the number of syntax errors found by the parser.
     * to be imlemented by a language specific parser subclass
     *
     * @return the error count.
     */
    public abstract int getErrorCount();

    /**
     * Call the scanners current token() method
     *
     * @return the current token
     */
    public Token currentToken() {
        return scanner.currentToken();
    }

    /**
     * Call the scanners nextToken() method
     *
     * @return the token.
     * @throws Exception if an error occured
     */
    public Token nextToken()
            throws Exception {
        return scanner.nextToken();
    }


    @Override
    public void addMessageListener(MessageListener listener) {
        messageHandler.addListener(listener);
    }

    @Override
    public void removeMessageListener(MessageListener listener) {
        messageHandler.removeListener(listener);

    }

    @Override
    public void sendMessage(Message message) {
        messageHandler.sendMessage(message);
    }
}
